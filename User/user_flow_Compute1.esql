

CREATE COMPUTE MODULE user_flow_Compute1
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		IF InputRoot.JSON.Data.msg = 'validation DONE' THEN
			SET OutputLocalEnvironment.Destination.File.Directory = 'C:\Users\Mahmoud Mohsen\IBM\ACET12\workspace\USER\registerd users';
			SET OutputLocalEnvironment.Destination.File.Name = InputRoot.JSON.Data.national_id || ' ' ||  Environment.Variables.Data.channel || '.txt';
			
			SET OutputRoot.JSON.Data.national_id = InputRoot.JSON.Data.national_id;
			SET OutputRoot.JSON.Data.password = Environment.Variables.Data.password;  
			SET OutputRoot.JSON.Data.username = InputRoot.JSON.Data.username;
			SET OutputRoot.JSON.Data.wallet_number = InputRoot.JSON.Data.wallet_number;
			SET OutputRoot.JSON.Data.card_number = InputRoot.JSON.Data.card_number;
			SET OutputRoot.JSON.Data.acc_number = InputRoot.JSON.Data.acc_number;
			SET OutputRoot.JSON.Data.phone = InputRoot.JSON.Data.phone;
			SET OutputRoot.JSON.Data.wallet_balance = InputRoot.JSON.Data.wallet_balance;
			SET OutputRoot.JSON.Data.card_balance = InputRoot.JSON.Data.card_balance;
			SET OutputRoot.JSON.Data.acc_balance = InputRoot.JSON.Data.acc_balance;

		ELSE IF InputRoot.JSON.Data.msg = 'national id not found' THEN
			SET OutputLocalEnvironment.Destination.File.Directory = 'C:\Users\Mahmoud Mohsen\IBM\ACET12\workspace\USER\invalid users';
			SET OutputLocalEnvironment.Destination.File.Name = 'enterd id not found.txt';
			SET OutputRoot.JSON.Data = Environment.Variables.Data ;
		ELSE 
			SET OutputLocalEnvironment.Destination.File.Directory = 'C:\Users\Mahmoud Mohsen\IBM\ACET12\workspace\USER\invalid users';
			SET OutputLocalEnvironment.Destination.File.Name =  'error registration for user with id ' || Environment.Variables.Data.national_id || '.txt';
			SET OutputRoot.JSON.Data = Environment.Variables.Data ;
		END IF;
		END IF;
		
		

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
